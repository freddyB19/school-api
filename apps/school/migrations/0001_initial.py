# Generated by Django 5.2.2 on 2025-06-18 21:29

import apps.school.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ColorHexFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(max_length=8, validators=[apps.school.models.validate_hex_format])),
            ],
            options={
                'verbose_name': 'Color en formato hexadecimal',
                'verbose_name_plural': 'Colores en formato hexadecimal',
                'db_table': 'color_hex_format',
            },
        ),
        migrations.CreateModel(
            name='CulturalEventMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo de la foto es muy corto')])),
                ('photo', models.URLField()),
            ],
            options={
                'verbose_name': 'Foto de evento cultural',
                'verbose_name_plural': 'Fotos de eventos culturales',
            },
        ),
        migrations.CreateModel(
            name='DaysWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.IntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday')], default=1, unique=True)),
                ('name', models.CharField(default='Lunes', editable=False, max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Día de la Semana',
                'verbose_name_plural': 'Días de la Semana',
                'db_table': 'days_week',
                'ordering': ['day'],
            },
        ),
        migrations.CreateModel(
            name='ExtraActivitieFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo del archivo es muy corto')])),
                ('file', models.URLField()),
            ],
            options={
                'verbose_name': 'Archivo de actividad extracurricular',
                'verbose_name_plural': 'Archivos de actividades extracurriculares',
                'db_table': 'extra_activitie_file',
            },
        ),
        migrations.CreateModel(
            name='ExtraActivitiePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo de la foto es muy corto')])),
                ('photo', models.URLField()),
            ],
            options={
                'verbose_name': 'Foto de actividad extracurricular',
                'verbose_name_plural': 'Fotos de actividades extracurriculares',
                'db_table': 'extra_activitie_photo',
            },
        ),
        migrations.CreateModel(
            name='InfraestructureMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo de la foto es muy corto')])),
                ('photo', models.URLField()),
            ],
            options={
                'verbose_name': 'Foto de la infraestructura',
                'verbose_name_plural': 'Fotos de las infraestructuras',
            },
        ),
        migrations.CreateModel(
            name='NewMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo de la foto es muy corto')])),
                ('photo', models.URLField()),
            ],
            options={
                'verbose_name': 'Foto de la noticia',
                'verbose_name_plural': 'Fotos de las noticias',
                'db_table': 'new_media',
            },
        ),
        migrations.CreateModel(
            name='RepositoryMediaFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo del archivo es muy corto')])),
                ('file', models.URLField()),
            ],
            options={
                'verbose_name': 'Archivo multimedia del repositorio',
                'verbose_name_plural': 'Archivos multimedia de los repositorios',
                'db_table': 'repository_media_file',
            },
        ),
        migrations.CreateModel(
            name='ExtraActivitieSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('opening_time', models.TimeField(blank=True, null=True)),
                ('closing_time', models.TimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('daysweek', models.ManyToManyField(to='school.daysweek')),
            ],
            options={
                'verbose_name': 'Horario de actividade extracurricular',
                'verbose_name_plural': 'Horarios de actividades extracurriculares',
                'db_table': 'extra_activitie_schedule',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El nombre de la escuela es muy corto')])),
                ('subdomain', models.SlugField(unique=True)),
                ('logo', models.URLField(blank=True, null=True)),
                ('address', models.CharField(max_length=100)),
                ('mission', models.TextField(blank=True, null=True)),
                ('vision', models.TextField(blank=True, null=True)),
                ('history', models.TextField(blank=True, null=True)),
                ('private', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Escuela',
                'verbose_name_plural': 'Escuelas',
                'db_table': 'school',
                'indexes': [models.Index(fields=['subdomain'], name='subdomain_school_idx')],
            },
        ),
        migrations.CreateModel(
            name='PaymentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=70, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo es muy corto')])),
                ('photo', models.URLField()),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paymentInfoList', to='school.school')),
            ],
            options={
                'verbose_name': 'Información de pago',
                'verbose_name_plural': 'Información de pagos',
                'db_table': 'payment_info',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=11, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=11, message='El número de telefono ingresado es incorrecto (es muy corto)'), django.core.validators.MaxLengthValidator(limit_value=11, message='El número de telefono ingresado es incorrecto (es muy largo)')])),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contactsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Información de contacto',
                'verbose_name_plural': 'Informaciones sobre contactos',
                'db_table': 'contact_info',
            },
        ),
        migrations.CreateModel(
            name='SchoolStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El nombre es muy corto')])),
                ('occupation', models.CharField(choices=[('profesor', 'Teacher'), ('administrativo', 'Administrative')], default='administrativo', max_length=15)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staffList', to='school.school')),
            ],
            options={
                'verbose_name': 'Personal',
                'verbose_name_plural': 'Lista del personal',
                'db_table': 'school_staff',
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El nombre es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('preescolar', 'Preschool'), ('básica', 'Primary'), ('secundaria', 'High')], default='básica', max_length=11)),
                ('section', models.CharField(blank=True, max_length=3, null=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gradesList', to='school.school')),
                ('teacher', models.ManyToManyField(limit_choices_to={'occupation': 'profesor'}, related_name='teacherList', to='school.schoolstaff')),
            ],
            options={
                'verbose_name': 'Grado',
                'verbose_name_plural': 'Grados de la escuela',
                'db_table': 'grade',
            },
        ),
        migrations.CreateModel(
            name='SettingFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colors', models.ManyToManyField(to='school.colorhexformat')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='settingsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Configuración',
                'verbose_name_plural': 'Configuraciones',
                'db_table': 'settins_format',
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.URLField()),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='socialMediasList', to='school.school')),
            ],
            options={
                'verbose_name': 'Red social',
                'verbose_name_plural': 'Redes sociales',
                'db_table': 'social_media',
            },
        ),
        migrations.CreateModel(
            name='TimeGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('opening_time', models.TimeField()),
                ('closing_time', models.TimeField()),
                ('active', models.BooleanField(default=True)),
                ('overview', models.TextField(blank=True, null=True)),
                ('daysweek', models.ManyToManyField(to='school.daysweek')),
            ],
            options={
                'verbose_name': 'Grupo de Horario',
                'verbose_name_plural': 'Grupos de Horarios',
                'db_table': 'time_group',
            },
        ),
        migrations.CreateModel(
            name='OfficeHour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval_description', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=4, message='La descripción sobre el horario de oficina, es muy corta')])),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='officeHoursList', to='school.school')),
                ('time_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intervalsList', to='school.timegroup')),
            ],
            options={
                'verbose_name': 'Horario de oficina',
                'verbose_name_plural': 'Horarios de oficina',
                'db_table': 'office_hour',
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_project', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=4, message='El titulo del proyecto es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('media', models.ManyToManyField(to='school.repositorymediafile')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='repositoriesList', to='school.school')),
            ],
            options={
                'verbose_name': 'Repositorio',
                'verbose_name_plural': 'Repositorios',
                'db_table': 'repository',
                'ordering': ['-created', '-updated'],
                'indexes': [models.Index(fields=['name_project'], name='repository_name_project_idx'), models.Index(fields=['created'], name='repository_created_idx'), models.Index(fields=['school'], name='repository_school_idx')],
                'unique_together': {('name_project', 'school')},
            },
        ),
        migrations.CreateModel(
            name='PaymentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname_student', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El nombre del estudiante es muy corto, ingrese el nombre completo')])),
                ('payment_detail', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gradesList', to='school.grade')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paymentReportsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Reporte de pago',
                'verbose_name_plural': 'Reportes de pagos',
                'db_table': 'payment_report',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['school'], name='payment_report_school_idx'), models.Index(fields=['created'], name='payment_report_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationCDCE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=70, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notificationsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Notificación CDCE',
                'verbose_name_plural': 'Notificaciones CDCE',
                'db_table': 'notification_cdce',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['school'], name='notification_school_idx'), models.Index(fields=['created'], name='notification_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=70, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pendiente', 'Pending'), ('publicado', 'Published')], default='publicado', max_length=10)),
                ('media', models.ManyToManyField(to='school.newmedia')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='newsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Noticia',
                'verbose_name_plural': 'Noticias',
                'db_table': 'news',
                'ordering': ['-created', '-updated'],
                'indexes': [models.Index(fields=['school'], name='news_school_idx'), models.Index(fields=['created'], name='news_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='Infraestructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El nombre es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('media', models.ManyToManyField(to='school.infraestructuremedia')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='infraestructuresList', to='school.school')),
            ],
            options={
                'verbose_name': 'Infraestructura',
                'verbose_name_plural': 'Infraestructuras',
                'db_table': 'infraestructure',
                'indexes': [models.Index(fields=['school'], name='infraestructure_school_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExtraActivitie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('files', models.ManyToManyField(to='school.extraactivitiefile')),
                ('photos', models.ManyToManyField(to='school.extraactivitiephoto')),
                ('schedules', models.ManyToManyField(to='school.extraactivitieschedule')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extraActivitiesList', to='school.school')),
            ],
            options={
                'verbose_name': 'Actividad extracurricular',
                'verbose_name_plural': 'Actividades extracurriculares',
                'db_table': 'extra_activitie',
                'ordering': ['-created', '-updated'],
                'indexes': [models.Index(fields=['school'], name='extra_activitie_school_idx'), models.Index(fields=['created'], name='extra_activitie_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo del archivo es muy corto')])),
                ('file', models.URLField()),
                ('description', models.TextField(blank=True, null=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='downloadsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Descarga',
                'verbose_name_plural': 'Descargas',
                'db_table': 'download',
                'indexes': [models.Index(fields=['title'], name='download_title_idx'), models.Index(fields=['school'], name='download_school_idx')],
                'unique_together': {('title', 'school')},
            },
        ),
        migrations.CreateModel(
            name='CulturalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField()),
                ('media', models.ManyToManyField(to='school.culturaleventmedia')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='culturalEventsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Evento cultural',
                'verbose_name_plural': 'Eventos culturales',
                'db_table': 'cultural_event',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['school'], name='culturalevent_school_idx'), models.Index(fields=['date'], name='culturalevent_date_idx')],
                'unique_together': {('title', 'school')},
            },
        ),
        migrations.CreateModel(
            name='Coordinate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(limit_value=4, message='El titulo es muy corto')])),
                ('latitude', models.DecimalField(decimal_places=5, max_digits=8)),
                ('longitude', models.DecimalField(decimal_places=5, max_digits=8)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coordinatesList', to='school.school')),
            ],
            options={
                'verbose_name': 'Coordenada',
                'verbose_name_plural': 'Coordenadas',
                'db_table': 'coordinate',
                'unique_together': {('title', 'school')},
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(limit_value=5, message='El titulo es muy corto')])),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField()),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendarsList', to='school.school')),
            ],
            options={
                'verbose_name': 'Calendario',
                'verbose_name_plural': 'Fechas del calendario',
                'db_table': 'calendar',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['school'], name='calendar_school_idx'), models.Index(fields=['date'], name='calendar_date_idx')],
            },
        ),
    ]
